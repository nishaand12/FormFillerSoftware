name: Build Intel x86_64 DMG (Manual)

# Builds Intel (x86_64) DMG with ad-hoc code signing
# For Apple Silicon ARM64 build, use build-arm64-dmg.yml
on:
  workflow_dispatch:

jobs:
  build-intel:
    name: Build Intel (x86_64) DMG
    runs-on: macos-13  # Intel Mac runner
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Verify Architecture
        run: |
          echo "🔍 Verifying we're on Intel x86_64..."
          uname -m
          python3 -c "import platform; print(f'Python architecture: {platform.machine()}')"
          if [ "$(uname -m)" != "x86_64" ]; then
            echo "❌ ERROR: Not running on x86_64!"
            exit 1
          fi
          echo "✅ Confirmed x86_64 architecture"
      
      - name: Get version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION | tr -d '\n\r ')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"
      
      - name: Create Supabase config
        run: |
          mkdir -p config
          cat > config/supabase_config.json << 'EOF'
          {
            "supabase_url": "${{ secrets.SUPABASE_URL }}",
            "supabase_anon_key": "${{ secrets.SUPABASE_ANON_KEY }}"
          }
          EOF
          echo "✅ Supabase config created"
      
      - name: Install dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies installed"
      
      - name: Verify llama-cpp-python architecture
        run: |
          echo "🔍 Verifying llama-cpp-python is x86_64..."
          python3 -c "
          import llama_cpp
          import os
          lib_path = os.path.dirname(llama_cpp.__file__)
          print(f'llama_cpp location: {lib_path}')
          "
          # Check if llama.dylib is x86_64
          find $(python3 -c "import llama_cpp, os; print(os.path.dirname(llama_cpp.__file__))") -name "*.dylib" -o -name "*.so" | head -5 | while read lib; do
            echo "Checking: $lib"
            file "$lib" || true
            lipo -info "$lib" 2>/dev/null || true
          done
      
      - name: Build Intel DMG with ad-hoc signing
        env:
          # Set empty signing identity to trigger ad-hoc signing
          SIGNING_IDENTITY: ""
          # Don't provide notarization credentials - we don't need it
          NOTARIZATION_TEAM_ID: ""
          NOTARIZATION_USERNAME: ""
          NOTARIZATION_PASSWORD: ""
          # Skip signature verification to avoid timeout in CI
          SKIP_CODESIGN_VERIFY: "1"
        run: |
          echo "🔨 Building Intel x86_64 application with ad-hoc signing..."
          python build_mac.py
          
          # The build script will:
          # 1. Use ad-hoc signing (signing_identity = "-")
          # 2. Skip notarization (no credentials provided)
          # 3. Skip verification (SKIP_CODESIGN_VERIFY=1)
          # 4. Create a working DMG
      
      - name: Quick signature check
        run: |
          echo "🔍 Quick signature check..."
          # Just verify the app was signed (quick check, no verbose output)
          if [ -d "dist/PhysioClinicAssistant.app" ]; then
            codesign -dv dist/PhysioClinicAssistant.app 2>&1 | head -5 || true
            echo "✅ App is signed"
          fi
      
      - name: Verify app architecture
        run: |
          echo "🔍 Verifying built application architecture..."
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          # Check if DMG was created
          if [ ! -f "PhysioClinicAssistant-${VERSION}-macOS.dmg" ]; then
            echo "❌ ERROR: DMG not found!"
            ls -lh PhysioClinicAssistant-*.dmg || true
            exit 1
          fi
          
          # Mount DMG and check app architecture
          echo "Mounting DMG to verify contents..."
          hdiutil attach "PhysioClinicAssistant-${VERSION}-macOS.dmg" -mountpoint /tmp/dmg_verify -readonly
          
          # Check main executable
          EXECUTABLE="/tmp/dmg_verify/PhysioClinicAssistant.app/Contents/MacOS/PhysioClinicAssistant"
          if [ -f "$EXECUTABLE" ]; then
            echo "Main executable architecture:"
            file "$EXECUTABLE"
            lipo -info "$EXECUTABLE"
          fi
          
          # Check some key libraries
          echo -e "\nKey library architectures:"
          find "/tmp/dmg_verify/PhysioClinicAssistant.app/Contents/Frameworks" -name "libllama.dylib" -o -name "libggml*.dylib" | while read lib; do
            echo "- $(basename "$lib"):"
            lipo -info "$lib" 2>/dev/null || file "$lib"
          done
          
          # Unmount
          hdiutil detach /tmp/dmg_verify
          
          echo "✅ Architecture verification complete"
      
      - name: Rename DMG for Intel
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "Looking for: PhysioClinicAssistant-${VERSION}-macOS.dmg"
          ls -lh PhysioClinicAssistant-*.dmg
          
          mv PhysioClinicAssistant-${VERSION}-macOS.dmg \
             PhysioClinicAssistant-${VERSION}-macOS-Intel-x86_64.dmg
          
          echo "✅ Created: PhysioClinicAssistant-${VERSION}-macOS-Intel-x86_64.dmg"
          
          # Show file info
          ls -lh PhysioClinicAssistant-*-Intel-x86_64.dmg
      
      - name: Upload Intel DMG as artifact
        uses: actions/upload-artifact@v4
        with:
          name: intel-x86_64-dmg
          path: PhysioClinicAssistant-*-macOS-Intel-x86_64.dmg
          retention-days: 30
      
      - name: Create summary
        if: success()
        run: |
          echo "## ✅ Intel x86_64 Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Intel (x86_64) DMG has been built successfully with ad-hoc code signing." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
          echo "- **intel-x86_64-dmg** - For Intel Macs (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- This build uses **ad-hoc code signing** (no Apple Developer certificate required)" >> $GITHUB_STEP_SUMMARY
          echo "- Users will need to remove quarantine attributes: \`xattr -cr PhysioClinicAssistant.app\`" >> $GITHUB_STEP_SUMMARY
          echo "- This DMG will work on Intel Macs only (not Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "- For Apple Silicon, use the build-arm64-dmg workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ What Was Verified" >> $GITHUB_STEP_SUMMARY
          echo "- Built on native x86_64 runner (macos-13)" >> $GITHUB_STEP_SUMMARY
          echo "- Python and all dependencies compiled for x86_64" >> $GITHUB_STEP_SUMMARY
          echo "- llama-cpp-python and ggml libraries are x86_64" >> $GITHUB_STEP_SUMMARY
          echo "- DMG contents verified as x86_64" >> $GITHUB_STEP_SUMMARY

